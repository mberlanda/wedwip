var suggestionsList = <%= @suggestions.to_json.html_safe %> ;

function loadMakers(markerObj, parent_map){
  var markers = [] ;
  console.log(suggestionsList);
  for (index in suggestionsList){
    elem = suggestionsList[index];
    elem.map = parent_map;

    markers.push(new markerObj(elem));
  };
  return markers;
}

function initAutocomplete() {
  var map = new google.maps.Map(document.getElementById('map'), {
    center: {lat: 42.991843, lng: 12.495453},
    zoom: 7,
    mapTypeId: google.maps.MapTypeId.ROADMAP
  });

  // Create the search box and link it to the UI element.
  var input = document.getElementById('pac-input');
  var searchBox = new google.maps.places.SearchBox(input);
  map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

  // Bias the SearchBox results towards current map's viewport.
  map.addListener('bounds_changed', function() {
    searchBox.setBounds(map.getBounds());
  });

  var markers = loadMakers(google.maps.Marker, map);
  // Listen for the event fired when the user selects a prediction and retrieve
  // more details for that place.
  searchBox.addListener('places_changed', function() {
    var places = searchBox.getPlaces();

    if (places.length == 0) {
      return;
    }

    // Clear out the old markers.
    //markers.forEach(function(marker) {
    //  marker.setMap(null);
    //});
    //markers = [];

    // For each place, get the icon, name and location.
    var bounds = new google.maps.LatLngBounds();
    places.forEach(function(place) {
      var icon = {
        url: place.icon,
        size: new google.maps.Size(71, 71),
        origin: new google.maps.Point(0, 0),
        anchor: new google.maps.Point(17, 34),
        scaledSize: new google.maps.Size(25, 25)
      };

      // Create a marker for each place.
      var marker = {
        map: map,
        icon: icon,
        title: place.name,
        position: place.geometry.location
      }

      markers.push(new google.maps.Marker(marker));

      createMarker(marker);

      if (place.geometry.viewport) {
        // Only geocodes have viewport.
        bounds.union(place.geometry.viewport);
      } else {
        bounds.extend(place.geometry.location);
      }
    });
    map.fitBounds(bounds);
  });
}

function createMarker(item){
  console.log(item);
  console.log(JSON.stringify(item.icon));
  console.log(JSON.stringify(item.title));
  console.log(JSON.stringify(item.position));  

  var request = $.ajax({
    beforeSend: function(xhr) {xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'))},
    url: '<%= places_path %>',
    dataType: 'json',
    type: "POST",
    quietMillis: 200,
    data: { marker: JSON.stringify(item, function(key,value){
        if(key == "map"){
            return undefined;
        }
        return value;
      })}
    });

  request.done(function(data){
      suggestionsList = JSON.parse(data["markers"]);
      initAutocomplete();
  });
};